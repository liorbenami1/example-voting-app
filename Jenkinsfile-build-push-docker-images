pipeline {
    agent {
      label 'BUILD_AGENT'
    }

            environment {
                IMAGE_VOTE = "0"
                IMAGE_RESULT = "0"
                IMAGE_WORKER = "0"
                IMAGE_APP_VERSION = "0"
            }

    parameters {
      string(name: 'SOURCE_BRANCH_NAME', defaultValue: 'master', description: 'Git source branch to be released')
      string(name: 'TARGET_BRANCH_NAME', defaultValue: 'release/latest', description: 'Git Target branch of released version')
      booleanParam(name: 'IS_VOTE_CHANGE', defaultValue: false, description: 'indicate if vote_image changed')
      booleanParam(name: 'IS_RESULT_CHANGE', defaultValue: false, description: 'indicate if image_result changed')
      booleanParam(name: 'IS_WORKER_CHANGE', defaultValue: false, description: 'indicate if image_worker changed')
    }

  stages {
    stage('Increment Version') {
        steps {
            script {
                cleanWs()
                checkout scm

                def extra_args = ""
                if (params.IS_VOTE_CHANGE) {
                    extra_args += "--is_vote_change "
                }
                if (params.IS_RESULT_CHANGE) {
                    extra_args += "--is_result_change "
                }
                if (params.IS_WORKER_CHANGE) {
                    extra_args += "--is_worker_change "
                }
                try {
                    sh(returnStdout: true, script: "git config --global credential.helper 'cache --timeout=3600'")
                    def currentVersions = sh(returnStdout: true, script: "python3 ${env.WORKSPACE}/increment-version.py -p ${env.WORKSPACE} -s ${params.SOURCE_BRANCH_NAME} -t ${params.TARGET_BRANCH_NAME} ${extra_args}").trim()
                    echo "currentVersions = ${currentVersions}"
                }
                catch (InterruptedException e) {
                    currentBuild.result = "ABORTED"
                }
                catch (Exception e) {
                    currentBuild.result = "FAILURE"
                }
            }
        }
    }

    stage('Read current versions') {
        steps {
            //library 'buildUtils'
            //readCurrentVersion()
            script {
                def datas = readYaml file: '"${env.WORKSPACE}"/dev-values.yaml'
                datas.each{println it.subject}
            }
        }
    }

    /*
    stage('Build result') {
        steps {
            sh "docker build -t liorbenami/result:${env.BUILD_ID} ./result"
        }
    }

    stage('Build vote') {
      steps {
        sh "docker build -t liorbenami/vote:${env.BUILD_ID} ./vote"
      }
    }

    stage('Build worker') {
      steps {
        sh "docker build -t liorbenami/worker:${env.BUILD_ID} ./worker"
      }
    }

    stage('Push result image') {
           steps {
        withDockerRegistry(credentialsId: 'dockerhub-liorbenami', url:'') {
          sh "docker push liorbenami/result:${env.BUILD_ID}"
        }
      }
    }

    stage('Push vote image') {
            steps {
        withDockerRegistry(credentialsId: 'dockerhub-liorbenami', url:'') {
          sh "docker push liorbenami/vote:${env.BUILD_ID}"
        }
      }
    }

    stage('Push worker image') {
            steps {
        withDockerRegistry(credentialsId: 'dockerhub-liorbenami', url:'') {
          sh "docker push liorbenami/worker:${env.BUILD_ID}"
        }
      }
    }
  */
  }
}

